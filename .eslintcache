[{"/Users/william/Projects/JS/Online-sales-client-app/src/index.tsx":"1","/Users/william/Projects/JS/Online-sales-client-app/src/reportWebVitals.js":"2","/Users/william/Projects/JS/Online-sales-client-app/src/App/layout/App.tsx":"3","/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/RootStore.ts":"4","/Users/william/Projects/JS/Online-sales-client-app/src/features/footer/AppFooter.tsx":"5","/Users/william/Projects/JS/Online-sales-client-app/src/features/home/HomePage.tsx":"6","/Users/william/Projects/JS/Online-sales-client-app/src/features/nav/NavBar.tsx":"7","/Users/william/Projects/JS/Online-sales-client-app/src/features/customer/RegisterSuccess.tsx":"8","/Users/william/Projects/JS/Online-sales-client-app/src/features/customer/VerifyEmail.tsx":"9","/Users/william/Projects/JS/Online-sales-client-app/src/features/customer/Account.tsx":"10","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/SignUpForm.tsx":"11","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/SignInForm.tsx":"12","/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/UserStore.ts":"13","/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/AddressStore.ts":"14","/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/CommonStore.ts":"15","/Users/william/Projects/JS/Online-sales-client-app/src/App/api/Agent.ts":"16","/Users/william/Projects/JS/Online-sales-client-app/src/App/models/user.ts":"17","/Users/william/Projects/JS/Online-sales-client-app/src/App/models/address.ts":"18","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/AddressForm.tsx":"19","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/AddressPresentation.tsx":"20","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/EditProfile.tsx":"21","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/ErrorMessage.tsx":"22","/Users/william/Projects/JS/Online-sales-client-app/src/App/common/form/TextInputIcon.tsx":"23","/Users/william/Projects/JS/Online-sales-client-app/src/App/common/form/TextInput.tsx":"24","/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/AdStore.ts":"25","/Users/william/Projects/JS/Online-sales-client-app/src/features/ads/AdsShowcase.tsx":"26","/Users/william/Projects/JS/Online-sales-client-app/src/App/common/loading/LoadingComponent.tsx":"27"},{"size":673,"mtime":1612659764780,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":1612659764780,"results":"30","hashOfConfig":"29"},{"size":1899,"mtime":1612974451582,"results":"31","hashOfConfig":"29"},{"size":661,"mtime":1612973442899,"results":"32","hashOfConfig":"29"},{"size":1771,"mtime":1612659764778,"results":"33","hashOfConfig":"29"},{"size":1135,"mtime":1612974798176,"results":"34","hashOfConfig":"29"},{"size":2021,"mtime":1612970356539,"results":"35","hashOfConfig":"29"},{"size":1823,"mtime":1612967448199,"results":"36","hashOfConfig":"29"},{"size":2563,"mtime":1612967448200,"results":"37","hashOfConfig":"29"},{"size":3776,"mtime":1612967448199,"results":"38","hashOfConfig":"29"},{"size":4321,"mtime":1612967448201,"results":"39","hashOfConfig":"29"},{"size":2473,"mtime":1612967448201,"results":"40","hashOfConfig":"29"},{"size":2727,"mtime":1612967448199,"results":"41","hashOfConfig":"29"},{"size":1513,"mtime":1612967448198,"results":"42","hashOfConfig":"29"},{"size":748,"mtime":1612967448198,"results":"43","hashOfConfig":"29"},{"size":2310,"mtime":1612973833261,"results":"44","hashOfConfig":"29"},{"size":586,"mtime":1612967448197,"results":"45","hashOfConfig":"29"},{"size":405,"mtime":1612967448197,"results":"46","hashOfConfig":"29"},{"size":3586,"mtime":1612967448200,"results":"47","hashOfConfig":"29"},{"size":1649,"mtime":1612967448200,"results":"48","hashOfConfig":"29"},{"size":3300,"mtime":1612967448201,"results":"49","hashOfConfig":"29"},{"size":732,"mtime":1612967448201,"results":"50","hashOfConfig":"29"},{"size":713,"mtime":1612659764777,"results":"51","hashOfConfig":"29"},{"size":603,"mtime":1612659764777,"results":"52","hashOfConfig":"29"},{"size":493,"mtime":1612974581790,"results":"53","hashOfConfig":"29"},{"size":1520,"mtime":1612979796201,"results":"54","hashOfConfig":"29"},{"size":354,"mtime":1612973705803,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"16hkogz",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/Users/william/Projects/JS/Online-sales-client-app/src/index.tsx",[],["117","118"],"/Users/william/Projects/JS/Online-sales-client-app/src/reportWebVitals.js",[],["119","120"],"/Users/william/Projects/JS/Online-sales-client-app/src/App/layout/App.tsx",["121"],"/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/RootStore.ts",[],"/Users/william/Projects/JS/Online-sales-client-app/src/features/footer/AppFooter.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/features/home/HomePage.tsx",["122"],"/Users/william/Projects/JS/Online-sales-client-app/src/features/nav/NavBar.tsx",["123","124"],"import React, { useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport {\n  Grid,\n  Menu,\n  Image,\n  Search,\n  Segment,\n  Button,\n  Dropdown,\n} from 'semantic-ui-react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { RootStoreContext } from '../../App/stores/RootStore';\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user, isLoggedIn, logout } = rootStore.userStore;\n  return (\n    <Segment inverted>\n      <Grid>\n        <Grid.Row columns={2}>\n          <Grid.Column>\n            <Menu secondary inverted>\n              <Menu.Item as={Link} to='/'>\n                Home\n              </Menu.Item>\n              <Menu.Item as={Link} to='/'>\n                Buy & Sell\n              </Menu.Item>\n              <Menu.Item as={Link} to='/'>\n                New Sale\n              </Menu.Item>\n            </Menu>\n          </Grid.Column>\n          <Grid.Column textAlign='right'>\n            {user && isLoggedIn ? (\n              <Menu.Item style={{ float: 'right', marginRight: '20px' }}>\n                <Button\n                  inverted\n                  basic\n                  color='yellow'\n                  icon='user'\n                  style={{ marginLeft: '10px' }}\n                  as={Link}\n                  to='/user/account'\n                ></Button>\n                <Dropdown pointing='top right'>\n                  <Dropdown.Menu>\n                    <Dropdown.Item\n                      style={{ position: 'left' }}\n                      onClick={logout}\n                      text='Se Deconnecter'\n                    />\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Menu.Item>\n            ) : (\n              <p>\n                <NavLink to='/register'>Register</NavLink> or{' '}\n                <NavLink to='/signIn'>Sign In</NavLink>\n              </p>\n            )}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(NavBar);\n","/Users/william/Projects/JS/Online-sales-client-app/src/features/customer/RegisterSuccess.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/features/customer/VerifyEmail.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/features/customer/Account.tsx",["125","126","127"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Button, Card, Image, Icon, Header } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../App/stores/RootStore\";\nimport { UserFormValues } from \"../../App/models/user\";\nimport AddressForm from \"../form/AddressForm\";\nimport { EditProfile } from \"../form/EditProfile\";\nimport { AddressFormValues } from \"../../App/models/address\";\nimport AddressPresentation from \"../form/AddressPresentation\";\n\nconst Account: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { loadUser } = rootStore.userStore;\n  const { token } = rootStore.commonStore;\n  const { loadAddress } = rootStore.addressStore;\n  const [user, setUser] = useState(new UserFormValues());\n  const [address, setAddress] = useState(new AddressFormValues());\n\n  const Status = {\n    editProfile: \"EditProfile\",\n    addressForm: \"addressForm\",\n    adsForm: \"adsForm\",\n    messagesForm: \"messagesForm\",\n    userAddress: \"userAddress\",\n  };\n\n  const [status, setStatus] = useState(Status.adsForm);\n\n  useEffect(() => {\n    if (token) {\n      loadUser().then((user) => setUser(new UserFormValues(user)));\n    }\n  }, [loadUser, token]);\n\n  useEffect(() => {\n    if (user) {\n      loadAddress().then((address) =>\n        setAddress(new AddressFormValues(address))\n      );\n    }\n  }, [loadAddress, user]);\n\n  const getBody = () => {\n    switch (status) {\n      case Status.adsForm:\n        return (\n          <div style={{ textAlign: \"center\", marginTop: \"15%\" }}>\n            <Header as={\"h2\"}>You have no active ads at the moment.</Header>\n            <Header as={\"h4\"}>\n              Why not <a href=\"/\">post and ad</a> now?\n            </Header>\n          </div>\n        );\n      case Status.editProfile:\n        return (\n          <div className=\"center\">\n            <EditProfile />\n          </div>\n        );\n      case Status.addressForm:\n        return (\n          <div className=\"center\">\n            <AddressForm />\n          </div>\n        );\n      case Status.userAddress:\n        return (\n          <div className=\"center\">\n            <AddressPresentation />\n          </div>\n        );\n      case Status.messagesForm:\n        return (\n          <div className=\"center\" style={{ textAlign: \"center\" }}>\n            <p>Messages Form</p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <Grid style={{ marginLeft: \"2%\" }}>\n      <Grid.Row>\n        <Grid.Column width={4}>\n          <Card color=\"yellow\" fluid>\n            <Image src=\"unnamed.png\" centered fluid />\n            <Card.Content>\n              <Card.Header>{user.firstName + \" \" + user.lastName}</Card.Header>\n              <Card.Description>\n                <Icon name=\"edit\" />\n                <a onClick={() => setStatus(Status.editProfile)}>\n                  Edit profile\n                </a>\n              </Card.Description>\n              <Card.Description>\n                <Icon name=\"home\" />\n                {address.street ? (\n                  <a onClick={() => setStatus(Status.userAddress)}>\n                    My Address\n                  </a>\n                ) : (\n                  <a onClick={() => setStatus(Status.addressForm)}>\n                    Add Address\n                  </a>\n                )}\n              </Card.Description>\n            </Card.Content>\n          </Card>\n          <Button.Group basic color=\"yellow\" vertical fluid>\n            <Button onClick={() => setStatus(Status.adsForm)}>My Ads</Button>\n            <Button onClick={() => setStatus(Status.messagesForm)}>\n              My Messages\n            </Button>\n          </Button.Group>\n        </Grid.Column>\n        <Grid.Column width={12}>{getBody()}</Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default Account;\n","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/SignUpForm.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/features/form/SignInForm.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/UserStore.ts",["128"],"import {\n  action,\n  computed,\n  makeObservable,\n  observable,\n  runInAction,\n} from \"mobx\";\nimport { RootStore } from \"./RootStore\";\nimport { IUser, IUserFormValues } from \"../models/user\";\nimport Agent from \"../api/Agent\";\nimport { history } from \"../../index\";\nimport { IAds } from \"../models/ads\";\n\nexport default class UserStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    makeObservable(this);\n    this.rootStore = rootStore;\n  }\n\n  @observable user: IUser | null = null;\n  @observable userAds: IAds[] | undefined = undefined;\n  @observable loadingInitial = false;\n  @observable passwordError: string | null = null;\n\n  @computed get isLoggedIn() {\n    return !!this.user;\n  }\n\n  @action register = async (values: IUserFormValues) => {\n    this.passwordError = null;\n    if (values.password != values.confirmPassword) {\n      this.passwordError = \"Les mots de passes de sont pas identiques\";\n    } else {\n      try {\n        await Agent.Users.registerUser(values);\n        history.push(`/user/registerSuccess?email=${values.email}`);\n      } catch (error) {\n        throw error;\n      }\n    }\n  };\n\n  @action loadUser = async () => {\n    try {\n      const user = await Agent.Users.current();\n      runInAction(() => {\n        this.user = user;\n      });\n      return user;\n    } catch (error) {\n      runInAction(() => {\n        throw error;\n      });\n    }\n  };\n\n  @action login = async (values: IUserFormValues) => {\n    this.loadingInitial = true;\n    try {\n      const user = await Agent.Users.login(values);\n      runInAction(() => {\n        this.user = user;\n        this.rootStore.commonStore.setToken(user.token);\n      });\n      history.push(\"/\");\n      this.loadingInitial = false;\n    } catch (error) {\n      this.loadingInitial = false;\n      throw error;\n    }\n  };\n\n  @action logout = () => {\n    this.loadingInitial = true;\n    try {\n      this.rootStore.commonStore.setToken(null);\n      this.user = null;\n      history.push(\"/\");\n      window.location.reload();\n    } catch (error) {\n      throw error;\n    }\n    this.loadingInitial = false;\n  };\n\n  @action getUser = async () => {\n    this.loadingInitial = true;\n    try {\n      const user = await Agent.Users.current();\n      runInAction(() => {\n        this.user = user;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingInitial = false;\n        throw error;\n      });\n    }\n  };\n\n  // @action getMyAds = async () => {\n  //   this.loadingInitial = true;\n  //   try {\n  //     const userAds = await Agent.Users.getMyAds();\n  //     runInAction(() => {\n  //       this.userAds = userAds;\n  //     })\n  //   } catch(error) {\n  //     throw error;\n  //   }\n  // }\n}\n","/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/AddressStore.ts",[],"/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/CommonStore.ts",[],"/Users/william/Projects/JS/Online-sales-client-app/src/App/api/Agent.ts",["129"],"/Users/william/Projects/JS/Online-sales-client-app/src/App/models/user.ts",[],"/Users/william/Projects/JS/Online-sales-client-app/src/App/models/address.ts",[],"/Users/william/Projects/JS/Online-sales-client-app/src/features/form/AddressForm.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/features/form/AddressPresentation.tsx",["130"],"import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Header, Segment, Item, Button } from \"semantic-ui-react\";\nimport { AddressFormValues, IAddress } from \"../../App/models/address\";\nimport { RootStoreContext } from \"../../App/stores/RootStore\";\nimport { history } from '../../index';\n\nconst AddressPresentation = () => {\n  const { loadAddress } = useContext(RootStoreContext).addressStore;\n  const [address, setAddress] = useState(new AddressFormValues());\n\n  useEffect(() => {\n    loadAddress().then((address) => setAddress(new AddressFormValues(address)));\n  }, [loadAddress]);\n\n  return (\n    <Container fluid style={{ marginTop: \"60px\", width: \"400px\" }}>\n      <Header as=\"h3\" textAlign=\"center\">\n        YOUR ADDRESS\n      </Header>\n      <Segment clearing style={{ marginTop: \"2em\", marginBottom: \"3em\" }}>\n        <Item.Content>\n          <Header as={\"h5\"}>Your current address:</Header>\n          <Item.Description>{address.street}</Item.Description>\n          <Item.Description>\n            {address.city + \", \" + address.province + \" \" + address.postalCode}\n          </Item.Description>\n          <Item.Description>{address.country}</Item.Description>\n          <Item.Description>\n            <br />\n          </Item.Description>\n          <Item.Description>\n            <Button\n              onClick={() => history.push(\"/\")}\n              content=\"Modify address\"\n              color=\"yellow\"\n            ></Button>\n          </Item.Description>\n        </Item.Content>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default observer(AddressPresentation);\n","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/EditProfile.tsx",["131","132","133","134"],"import { FORM_ERROR } from \"final-form\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Field, Form as FinalForm } from \"react-final-form\";\nimport { NavLink, RouteComponentProps } from \"react-router-dom\";\nimport {\n  Button,\n  Container,\n  Form,\n  Grid,\n  Header,\n  Segment,\n} from \"semantic-ui-react\";\nimport { validate } from \"uuid\";\nimport { TextInput } from \"../../App/common/form/TextInput\";\nimport { TextInputIcon } from \"../../App/common/form/TextInputIcon\";\nimport { IUserFormValues, UserFormValues } from \"../../App/models/user\";\nimport { RootStoreContext } from \"../../App/stores/RootStore\";\nimport { ErrorMessage } from \"./ErrorMessage\";\n\nexport const EditProfile: React.FC = () => {\n  // const validate = combineValidators({\n  //   firstName: isRequired({ message: \"Le prenom est obligatoire\" }),\n  //   lastName: isRequired({ message: \"Le nom est obligatoire\" }),\n  // });\n\n  const rootStore = useContext(RootStoreContext);\n  const { loadUser } = rootStore.userStore;\n  const { token } = rootStore.commonStore;\n\n  const [user, setUser] = useState(new UserFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    if (token) {\n      loadUser()\n        .then((user) => setUser(new UserFormValues(user)))\n        .finally(() => setLoading(false));\n    } else {\n      setLoading(false);\n    }\n  }, [loadUser, setLoading, token]);\n\n  return (\n    <Container\n      fluid\n      style={{ marginTop: \"50px\", marginBottom: \"50px\", width: \"400px\" }}\n    >\n      <Header as=\"h3\" textAlign=\"center\">\n        MODIFIER VOTRE PROFILE\n      </Header>\n      <Segment clearing style={{ marginBottom: \"5em\" }}>\n        <FinalForm\n          initialValues={user}\n          onSubmit={(values: IUserFormValues) => console.log(values)}\n          render={({\n            handleSubmit,\n            invalid,\n            submitError,\n            pristine,\n            dirtySinceLastSubmit,\n          }) => (\n            <Form loading={loading} onSubmit={handleSubmit} error>\n              <Field\n                placeholder=\"Prenom\"\n                name=\"firstName\"\n                component={TextInput}\n              />\n              <Field placeholder=\"Nom\" name=\"lastName\" component={TextInput} />\n              <Field\n                placeholder=\"Email\"\n                name=\"username\"\n                icon=\"mail\"\n                component={TextInputIcon}\n              />\n              <Field\n                placeholder=\"Telephone\"\n                name=\"phoneNumber\"\n                icon=\"phone\"\n                component={TextInputIcon}\n              />\n              {submitError && !dirtySinceLastSubmit && (\n                <ErrorMessage error={submitError} text={submitError} />\n              )}\n              <Grid stackable>\n                <Grid.Row>\n                  <Grid.Column>\n                    <Button\n                      disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n                      fluid\n                      color=\"yellow\"\n                      type=\"submit\"\n                      content=\"MODIFIER\"\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form>\n          )}\n        />\n      </Segment>\n    </Container>\n  );\n};\n","/Users/william/Projects/JS/Online-sales-client-app/src/features/form/ErrorMessage.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/App/common/form/TextInputIcon.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/App/common/form/TextInput.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/App/stores/AdStore.ts",[],"/Users/william/Projects/JS/Online-sales-client-app/src/features/ads/AdsShowcase.tsx",[],"/Users/william/Projects/JS/Online-sales-client-app/src/App/common/loading/LoadingComponent.tsx",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":28,"column":6,"nodeType":"141","endLine":28,"endColumn":22,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":5,"column":3,"nodeType":"145","messageId":"146","endLine":5,"endColumn":7},{"ruleId":"143","severity":1,"message":"147","line":6,"column":3,"nodeType":"145","messageId":"146","endLine":6,"endColumn":8},{"ruleId":"143","severity":1,"message":"148","line":7,"column":3,"nodeType":"145","messageId":"146","endLine":7,"endColumn":9},{"ruleId":"149","severity":1,"message":"150","line":90,"column":17,"nodeType":"151","endLine":90,"endColumn":66},{"ruleId":"149","severity":1,"message":"150","line":97,"column":19,"nodeType":"151","endLine":97,"endColumn":68},{"ruleId":"149","severity":1,"message":"150","line":101,"column":19,"nodeType":"151","endLine":101,"endColumn":68},{"ruleId":"152","severity":1,"message":"153","line":33,"column":25,"nodeType":"154","messageId":"155","endLine":33,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":76,"column":1,"nodeType":"158","endLine":80,"endColumn":3},{"ruleId":"143","severity":1,"message":"159","line":4,"column":29,"nodeType":"145","messageId":"146","endLine":4,"endColumn":37},{"ruleId":"143","severity":1,"message":"160","line":1,"column":10,"nodeType":"145","messageId":"146","endLine":1,"endColumn":20},{"ruleId":"143","severity":1,"message":"161","line":4,"column":10,"nodeType":"145","messageId":"146","endLine":4,"endColumn":17},{"ruleId":"143","severity":1,"message":"162","line":4,"column":19,"nodeType":"145","messageId":"146","endLine":4,"endColumn":38},{"ruleId":"143","severity":1,"message":"163","line":13,"column":10,"nodeType":"145","messageId":"146","endLine":13,"endColumn":18},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAppLoaded'. Either include it or remove the dependency array.","ArrayExpression",["166"],"@typescript-eslint/no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","'Search' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'IAddress' is defined but never used.","'FORM_ERROR' is defined but never used.","'NavLink' is defined but never used.","'RouteComponentProps' is defined but never used.","'validate' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},"Update the dependencies array to be: [getUser, setAppLoaded, token]",{"range":"169","text":"170"},[1149,1165],"[getUser, setAppLoaded, token]"]